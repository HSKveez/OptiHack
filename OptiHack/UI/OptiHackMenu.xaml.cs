using Content.Shared.Inventory;
using OptiHack.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Containers;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Maths;
using Robust.Shared.Utility;

namespace OptiHack.UI;

[GenerateTypedNameReferences]
public sealed partial class OptiHackMenu : Window.OptiHackWindow
{
    private readonly IEyeManager _eye = IoCManager.Resolve<IEyeManager>();
    private readonly ILightManager _light = IoCManager.Resolve<ILightManager>();
    private readonly IEntityManager _entityManager = IoCManager.Resolve<IEntityManager>();
    private readonly ContainerContentAnalyzerSystem _containerContentAnalyzer = new();
    private readonly KiroshiSystem _hudSystem = new();
    
    
    public OptiHackMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        TitleLabel.Text = "OptiHack UI";
        
        
        
        Overlay.Pressed = false;
        Hud.Pressed = false;
        Fov.Pressed = !_eye.CurrentEye.DrawFov;
        
        Overlay.OnToggled += _ => ToggleOverlay();
        Hud.OnToggled += _ => _hudSystem.ToggleIcons();
        Fov.OnToggled += args => _eye.CurrentEye.DrawFov = !args.Pressed;
        Shadows.OnToggled += args => _light.DrawShadows = !args.Pressed;
        Scan.OnPressed += _ => ScanSlots();
        RefreshEntities.OnPressed += _ => PopulateEntityList();
        PopulateEntityList();
    }

    private void ToggleOverlay()
    {
        var overlaySystem = EntitySystem.Get<OptiHackOverlaySystem>();
        overlaySystem.Enabled ^= true;
    }

    private void ScanSlots()
    {
        var uid = _containerContentAnalyzer.TargetUidParser(Uid.Text);
        var content = _containerContentAnalyzer.ScanAllSlots(uid);
        
        OutputMessage(content);
    }
    private void OutputMessage(List<string> content)
    {
        var formatedMessage = new FormattedMessage();
        
        foreach (var item in content)
        {
            if(item.Contains("{GUN}") || item.Contains("{ANTAG}"))
            {
                formatedMessage.PushColor(Color.Red);
            }
            formatedMessage.AddMarkupPermissive(item);
            formatedMessage.PushNewline();
            formatedMessage.Pop();
            formatedMessage.PushColor(Color.White);
        }
        Info.SetMessage(formatedMessage);
    }
    
    private void PopulateEntityList()
    {
        EntityListContainer.DisposeAllChildren();
        
        var query = _entityManager.EntityQueryEnumerator<MetaDataComponent, ContainerManagerComponent, SpriteComponent, InventoryComponent>();
        while (query.MoveNext(out _, out var meta, out _, out _, out var slots))
        {
            if(slots.TemplateId == "pet"
                || slots.TemplateId == "hamster"
                || slots.TemplateId == "kangaroo"
                || slots.TemplateId == "medibot"
                || slots.TemplateId == "mannequin")
                continue;
            
            var button = new Button
            {
                StyleClasses = { "ButtonSquare" },
                HorizontalAlignment = HAlignment.Stretch,
                ToolTip = $"{meta.EntityName}\nUID: {meta.NetEntity.Id}"
            };

            var container = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                VerticalExpand = true,
                Children =
                {
                    new SpriteView(meta.NetEntity, _entityManager)
                    {
                        MaxHeight = 24,
                        MaxWidth = 24
                    },
                    new Label
                    {
                        Text = $"{meta.EntityName} [{meta.NetEntity.Id}]",
                        VerticalAlignment = VAlignment.Center,
                        Margin = new Thickness(5, 0, 0, 0)
                    }
                }
            };
            
            button.AddChild(container);
            
            button.OnPressed += _ =>
            {
                Uid.Text = meta.NetEntity.Id.ToString();
                ScanSlots();
            };

            EntityListContainer.AddChild(button);
        }
    }
}